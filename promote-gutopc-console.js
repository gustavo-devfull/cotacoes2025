// Script para promover gutopc@me.com a admin
// Execute este c√≥digo no console do navegador (F12 -> Console)

async function promoteGutopcToAdmin() {
  try {
    console.log('üîç Iniciando promo√ß√£o do usu√°rio gutopc@me.com...');
    
    // Importar Firebase (se n√£o estiver dispon√≠vel)
    if (typeof window.firebase === 'undefined') {
      console.log('‚ùå Firebase n√£o encontrado. Execute este script na p√°gina do sistema.');
      return;
    }
    
    // Usar o authService do sistema
    const { authService } = window;
    if (!authService) {
      console.log('‚ùå authService n√£o encontrado. Execute este script na p√°gina do sistema.');
      return;
    }
    
    // Buscar todos os usu√°rios
    console.log('üìã Buscando todos os usu√°rios...');
    const users = await authService.getAllUsers();
    console.log('Usu√°rios encontrados:', users);
    
    // Encontrar gutopc@me.com
    const gutopcUser = users.find(user => user.email === 'gutopc@me.com');
    
    if (!gutopcUser) {
      console.log('‚ùå Usu√°rio gutopc@me.com n√£o encontrado!');
      console.log('Usu√°rios dispon√≠veis:', users.map(u => u.email));
      return;
    }
    
    console.log('‚úÖ Usu√°rio encontrado:', gutopcUser);
    
    // Promover a admin
    console.log('üöÄ Promovendo usu√°rio a admin...');
    await authService.updateUserRole(gutopcUser.id, 'admin');
    
    console.log('üéâ Usu√°rio gutopc@me.com promovido a admin com sucesso!');
    console.log('üîÑ Recarregue a p√°gina para ver as mudan√ßas na navega√ß√£o.');
    
    // Verificar se funcionou
    const updatedUsers = await authService.getAllUsers();
    const updatedGutopc = updatedUsers.find(user => user.email === 'gutopc@me.com');
    console.log('‚úÖ Verifica√ß√£o - Role atual:', updatedGutopc?.role);
    
  } catch (error) {
    console.error('‚ùå Erro ao promover usu√°rio:', error);
  }
}

// Executar a fun√ß√£o
promoteGutopcToAdmin();
